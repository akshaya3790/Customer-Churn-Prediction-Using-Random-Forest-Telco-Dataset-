# -*- coding: utf-8 -*-
"""Customer Churn Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1opuIPhdWmzzFwEdBGUtE1REgTTmIpszE
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 2: Load Dataset (fixed)
# Corrected the file path and column name typo
file_path = "/content/drive/MyDrive/Customer Churn Prediction /WA_Fn-UseC_-Telco-Customer-Churn.csv"
df = pd.read_csv(file_path)
print("Initial Data:\n", df.head())

# Step 3: Data Cleaning
df.drop('customerID', axis=1, inplace=True)  # Remove ID column

# Convert TotalCharges to numeric (fixed typo in column name)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df['TotalCharges'].fillna(df['TotalCharges'].median(), inplace=True)

# Step 4: Encode Categorical Variables
binary_cols = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling', 'Churn']
for col in binary_cols:
    df[col] = df[col].map({'Yes': 1, 'No': 0})

df = pd.get_dummies(df, drop_first=True)

# Step 5: Feature Scaling
scaler = StandardScaler()
numerical = ['tenure', 'MonthlyCharges', 'TotalCharges']  # Fixed typo in variable name
df[numerical] = scaler.fit_transform(df[numerical])

# Step 6: Train-Test Split
X = df.drop('Churn', axis=1)
y = df['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Model Training (Random Forest)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 8: Predictions and Evaluation
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 9: Feature Importance Plot
importances = pd.Series(model.feature_importances_, index=X.columns)
importances.nlargest(10).plot(kind='barh', title="Top 10 Feature Importances", figsize=(10,6))
plt.xlabel('Importance Score')
plt.tight_layout()
plt.show()